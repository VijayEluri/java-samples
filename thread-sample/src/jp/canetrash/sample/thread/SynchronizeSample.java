/*
 * SynchronizeSample.java
 *
 * Created on 2008/03/20, 16:25
 */

package jp.canetrash.sample.thread;

import java.awt.EventQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import javax.swing.JTextField;

/**
 *
 * @author  funato
 */
public class SynchronizeSample extends javax.swing.JFrame {
    
    ReentrantLock lock = new ReentrantLock(true);
    /** Creates new form SynchronizeSample */
    public SynchronizeSample() {
        initComponents();
        Runnable[] trains = {
            new Train("特急", txtExpressLane1, txtExpressLane2, 50),
            new Train("普通", txtNormalLane1, txtNormalLane2, 100),
            new Train("急行", txtRapidLane1, txtRapidLane2, 75)
            };
        ScheduledExecutorService ses = Executors.newScheduledThreadPool(trains.length);
        for (Runnable train: trains) {
            ses.scheduleWithFixedDelay(train, 0, 1, TimeUnit.SECONDS);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtExpressLane1 = new javax.swing.JTextField();
        txtNormalLane1 = new javax.swing.JTextField();
        txtRapidLane1 = new javax.swing.JTextField();
        txtBridgeLane = new javax.swing.JTextField();
        txtExpressLane2 = new javax.swing.JTextField();
        txtNormalLane2 = new javax.swing.JTextField();
        txtRapidLane2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(SynchronizeSample.class);
        txtExpressLane1.setText(resourceMap.getString("txtExpressLane1.text")); // NOI18N
        txtExpressLane1.setName("txtExpressLane1"); // NOI18N

        txtNormalLane1.setText(resourceMap.getString("txtNormalLane1.text")); // NOI18N
        txtNormalLane1.setName("txtNormalLane1"); // NOI18N

        txtRapidLane1.setText(resourceMap.getString("txtRapidLane1.text")); // NOI18N
        txtRapidLane1.setName("txtRapidLane1"); // NOI18N

        txtBridgeLane.setText(resourceMap.getString("txtBridgeLane.text")); // NOI18N
        txtBridgeLane.setName("txtBridgeLane"); // NOI18N

        txtExpressLane2.setText(resourceMap.getString("txtExpressLane2.text")); // NOI18N
        txtExpressLane2.setName("txtExpressLane2"); // NOI18N

        txtNormalLane2.setText(resourceMap.getString("txtNormalLane2.text")); // NOI18N
        txtNormalLane2.setName("txtNormalLane2"); // NOI18N

        txtRapidLane2.setText(resourceMap.getString("txtRapidLane2.text")); // NOI18N
        txtRapidLane2.setName("txtRapidLane2"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtExpressLane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .add(txtNormalLane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .add(txtRapidLane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(txtBridgeLane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(txtRapidLane2)
                    .add(txtNormalLane2)
                    .add(txtExpressLane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(txtExpressLane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtNormalLane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtRapidLane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(txtExpressLane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtNormalLane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtBridgeLane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtRapidLane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(224, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SynchronizeSample().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField txtBridgeLane;
    private javax.swing.JTextField txtExpressLane1;
    private javax.swing.JTextField txtExpressLane2;
    private javax.swing.JTextField txtNormalLane1;
    private javax.swing.JTextField txtNormalLane2;
    private javax.swing.JTextField txtRapidLane1;
    private javax.swing.JTextField txtRapidLane2;
    // End of variables declaration//GEN-END:variables
    
class Train implements Runnable {

        String train;
        JTextField lane1;
        JTextField lane2;
        long speed;
        Train(String train, JTextField lane1, JTextField lane2, long speed) {
            this.train = train;
            this.lane1 = lane1;
            this.lane2 = lane2;
            this.speed = speed;
        }
        public void run() {
            try {
                print(lane2, "");
                for(String str = train;str.length() < 30;str = " " + str) {
                    print(lane1,str);
                }
                print(lane1, "");
                lock.lock();
                try {
                    for (String str = train; str.length() < 30; str = " " + str) {
                        print(txtBridgeLane,str);
                    }
                    print(txtBridgeLane, "");
                } finally {
                    lock.unlock();
                }
                for (String str = train; str.length() < 30; str = " " + str) {
                    print(lane2, str); 
                }
            } catch(InterruptedException e) {}
        }
        void print (final JTextField field, final String str) throws InterruptedException {
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    field.setText(str);
                }
            });
            Thread.sleep(speed);
        }
    }
}
